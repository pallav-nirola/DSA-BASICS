void allPaths(Node *root, string path, vector<string> &ans)
{
    if (root->left == NULL && root->right == NULL)
    {
        ans.push_back(path);
        return;
    }

    if (root->left)
        allPaths(root->left, path + "->" + to_string(root->left->data), ans);

    if (root->right)
        allPaths(root->right, path + "->" + to_string(root->right->data), ans);
}

void allPaths(Node *root, vector<int> &path)
{
    if (root == NULL)
        return;

    path.push_back(root->data);

    if (root->left == NULL && root->right == NULL)
    {
        for (int i = 0; i < path.size(); i++)
        {
            cout << path[i];
            if (i != path.size() - 1)
                cout << "->";
        }
        cout << endl;
    }
    if (root->left != NULL)
        allPaths(root->left, path);
    if (root->right != NULL)
        allPaths(root->right, path);

    // Backtrack
    path.pop_back();
}
