#include <iostream>
using namespace std;
class Node
{
public:
    int data;
    Node *next;
    Node *prev;

    Node(int value)
    {
        data = value;
        next = NULL;
        prev = NULL;
    }
};
class DoublyLinkedLists
{
private:
    Node *head;
    Node *tail;

public:
    DoublyLinkedLists()
    {
        head = NULL;
        tail = NULL;
    }
    void push_front(int val)
    {
        Node *newNode = new Node(val);
        if (head == NULL)
        {
            head = newNode;
            tail = newNode;
        }
        else
        {
            (*newNode).next = head;
            (*head).prev = newNode;
            head = newNode;
        }
    }
    void push_back(int val)
    {

        Node *newNode = new Node(val);
        if (head == NULL)
        {
            head = newNode;
            tail = newNode;
        }
        else
        {
            (*newNode).prev = tail;
            (*tail).next = newNode;
            tail = newNode;
        }
    }
    void pop_front(){
        Node *temp = head;
        head = head->next;
        head->prev = NULL;
        delete temp;
    }
    void pop_back(){
        Node *temp = tail;
        tail = tail->prev;
        tail->next = NULL;
        delete temp;
    }
    void display()
    {
        Node *temp = head;

        while (temp != NULL)
        {
            cout << (*temp).data << " ";
            temp = (*temp).next;
        }
    }
};
int main()
{
    DoublyLinkedLists Lists;
    Lists.push_front(2);
    Lists.push_front(3);
    Lists.push_front(4);
    Lists.push_front(5);
    Lists.push_front(6);
    Lists.push_front(7);
    Lists.push_front(8);
    Lists.push_back(11);
    Lists.pop_front();
    Lists .pop_back();
    Lists.display();

    return 0;
}
