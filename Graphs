#include <iostream>
#include <list>
#include <queue>
using namespace std;
class Graph
{
public:
    int vertex;
    list<int> *l; // int *arr;
    Graph(int vrx)
    {
        vertex = vrx;
        l = new list<int>[vertex]; // arr = new int[]
    }
    void addEdge(int u, int v)
    {
        l[u].push_back(v);
        l[v].push_back(u);
    }
    void bfsTraversal(int src , vector<bool> visited(vertex , false))
    {
        queue<int> q;
        q.push(src);
        visited[0] = true;
        while (q.empty() == 0)
        {
            int temp = q.front();
            q.pop();
            cout << temp << " ";
            for (int neighbour : l[temp])
            {
                if (visited[neighbour] != true)
                {
                    visited[neighbour] = true;
                    q.push(neighbour);
                }
            }
        }
        cout << endl;
    }
    void dfshelperfunc()
    {
        vector<bool> visited(vertex, false);
        dfsTravel(0, visited);
    }
    int dfsTravel(int src, vector<bool> &visited)
    {
        visited[0] = true;
        cout << src << " ";
        for (int neighbour : l[src])
        {

            if (visited[neighbour] != true)
            {
                visited[neighbour] = true;
                dfsTravel(neighbour, visited);
            }
        }
    }
void dfsCircularHelperFunc(int source)
{
    vector<bool> visited(vertex, false);
    if (dfsCircularTravel(source, visited, -1) == true)
        cout << "Cycle detected";
    else
        cout << "No cycle found";
}
bool dfsCircularTravel(int src, vector<bool> &visited, int parent)
{
    visited[src] = true;
    cout << src << " ";
    for (int neighbour : l[src])
    {
        if (visited[neighbour] != true)
        {
            if (dfsCircularTravel(neighbour, visited, src) == true)
            {
                return true;
            }
        }
        else if (neighbour != parent)
        {
            return true;
        }
    }

    return false;
}
    void printGraph()
    {
        for (int i = 0; i < vertex; i++)
        {
            cout << i << ": ";
            for (int neighbour : l[i])
            {
                cout << neighbour << " ";
            }
            cout << endl;
        }
    }
};
int main()
{
    Graph g1(5);
    g1.addEdge(0, 1);
    g1.addEdge(1, 2);
    g1.addEdge(1, 3);
    g1.addEdge(4, 2);
    g1.printGraph();
    g1.bfsTraversal();
    g1.dfshelperfunc();
    return 0;
}
