#include <iostream>
#include <vector>
#include <queue>
using namespace std;

void bfs(int startRow, int startCol, vector<vector<char>> &grid, vector<vector<int>> &visited)
{
    int rows = grid.size();
    int cols = grid[0].size();

    int dx[4] = {-1, 1, 0, 0};
    int dy[4] = {0, 0, -1, 1};

    queue<pair<int, int>> q;
    q.push({startRow, startCol});
    visited[startRow][startCol] = 1;

    while (!q.empty())
    {
        pair<int, int> cell = q.front();
        q.pop();
        for (int k = 0; k < 4; k++)
        {
            int newRow = cell.first + dx[k];
            int newCol = cell.second + dy[k];

            if (newRow >= 0 && newRow < rows && newCol >= 0 && newCol < cols)
            {
                if (grid[newRow][newCol] == '1' && visited[newRow][newCol] == 0)
                {
                    visited[newRow][newCol] = 1;
                    q.push({newRow, newCol});
                }
            }
        }
    }
}
int numIslands(vector<vector<char>> &grid)
{
    int rows = grid.size();
    int cols = grid[0].size();
    int count = 0;
    vector<vector<int>> visited(rows, vector<int>(cols, 0));
    for (int i = 0; i < rows; i++)
    {
        for (int j = 0; j < cols; j++)
        {
            if (grid[i][j] == '1' && visited[i][j] == 0)
            {
                count++;
                bfs(i, j, grid, visited);
            }
        }
    }
    return count;
}
// Driver code
int main()
{
    vector<vector<char>> grid = {
        {'1', '1', '0', '0', '0'},
        {'1', '1', '0', '0', '0'},
        {'0', '0', '1', '0', '0'},
        {'0', '0', '0', '1', '1'}};
    cout << "Number of Islands: " << numIslands(grid) << endl;
    return 0;
}
