#include <iostream>
using namespace std;

int findPeakIndex(int arr[], int size) {
    int left = size-size, right = size - 1;

    while (left < right) {
        int mid = left + (right - left) / 2;

        if (arr[mid] < arr[mid + 1]) {
            // Move to the right half
            left = mid + 1;
        } else {
            // Move to the left half
            right = mid;
        }
    }

    return left;  // 'left' and 'right' converge to the peak index
}

int main() {
    int size;

    // Ask user for the size of the array
    cout << "Enter the size of the array: ";
    cin >> size;

    int arr[size];

    // Ask user to enter the elements of the array
    cout << "Enter " << size << " elements of the mountain array:\n";
    for (int i = 0; i < size; i++) {
        cin >> arr[i];
    }

    // Find and display the peak index
     findPeakIndex(arr, size);
    cout << "The peak index is: " << findPeakIndex(arr, size) << endl;
    cout << "The peak element is: " << arr[findPeakIndex(arr, size)] << endl;

    return 0;
}
// we chose binary search option for that making it possible using linear search
#include<iostream>
using namespace std;

void findPeak(int arr[], int size) {
    for (int i = 1; i < size - 1; i++) {
        if (arr[i] >= arr[i - 1] && arr[i] >= arr[i + 1]) {
            cout << "Peak element is " << arr[i] << endl;
            return;  // We found the peak element, so we return.
        }
    }

    // Special case for the first element
    if (arr[0] >= arr[1]) {
        cout << "Peak element is " << arr[0] << endl;
        return;
    }

    // Special case for the last element
    if (arr[size - 1] >= arr[size - 2]) {
        cout << "Peak element is " << arr[size - 1] << endl;
        return;
    }

    cout << "No peak found!" << endl;
}

int main() {
    int size;
    cout << "Enter the size of your array: ";
    cin >> size;

    int arr[size];
    cout << "Enter your numbers: ";
    for (int i = 0; i < size; i++) {
        cin >> arr[i];
    }

    findPeak(arr, size);
    
    return 0;
}

