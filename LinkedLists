#include <iostream>
using namespace std;
class Node
{
public:
    int data;
    Node *next;

    Node(int val)
    {
        data = val;
        next = NULL;
    }
};
class LinkedList
{
private:
    Node *head;
    Node *tail;

public:
    LinkedList()
    {
        head = NULL;
        tail = NULL;
    }
    void push_front(int val)
    {
        Node *newNode = new Node(val);
        if (head == NULL)
        {
            head = newNode;
            tail = newNode;
        }
        else
        {
            (*newNode).next = head;
            head = newNode;
        }
    }
  void push_back(int val)
    {
        Node *newNode = new Node(val);
        if (head == NULL)
        {
            head = newNode;
            tail = newNode;
        }
        else
        {
            (*tail).next = newNode;
            tail = newNode;
        }
    }

    void pop_front()
    {
if(head==NULL){
return ;
}
else{

        Node *temp = head;
        head = (*head).next;
        (*temp).next = NULL;
        delete temp;
}
    }
    void pop_back()
    {

 if (head == NULL) return;
    if (head == tail) {
        delete head;
        head = tail = NULL;
        return;
    }
        Node *temp = head;
        while ((*temp).next != tail)
        {
            temp = (*temp).next;
        }

        temp = NULL;
        delete tail;
        tail = temp;
    }
    void display()
    {
        Node *temp = head;
        while (temp != NULL)
        {
            cout << (*temp).data << " ";
            temp = (*temp).next;
        }
    }
    void search(int val)
    {
        Node *temp = head;
        int count = 0;
        while (temp != NULL)
        {
            if ((*temp).data == val)
            {
                cout << "Value found at count " << count << endl;

                break;
            }
            else
            {
                count++;
                temp = (*temp).next;
            }
        }
    }
    void inser_at_pos(int val, int pos)
    {
        Node *newNode = new Node(val);
        if (pos == 0)
        {
            push_front(val);
        }
        else
        {

            Node *temp = head;
            for (int i = 0; i < pos - 1; i++)
            {
                temp = (*temp).next;
            }
            (*newNode).next = (*temp).next;
            (*temp).next = newNode;
        }
    }
    void delete_at_pos(int pos)
    {
        if (pos == 0)
        {
            pop_front();
        }
        else
        {

            Node *temp = head;
            for (int i = 0; i < pos - 1; i++)
            {
                temp = (*temp).next;
            }
            (*temp).next = (*(*temp).next).next;
            delete (*temp).next;
        }
    }

void deleteData(int key) {
    if (head == NULL) return;
    if (head->data == key) {
        pop_front();
        return;
    }
    Node* Temp = head;
    while (Temp->next != NULL) {
        if (Temp->next->data == key) {
            Node* toDelete = Temp->next;
            Temp->next = toDelete->next;
            if (toDelete == tail) tail = Temp;
            delete toDelete;
            return;
        }
        Temp = Temp->next;
    }
}

    void reverse()
    {
        Node *curr = head;
        Node *prev = NULL;
        Node *NEXT = NULL;
        while (curr != NULL)
        {
            NEXT = curr->next;
            (*curr).next = prev;
            prev = curr;
            curr = NEXT;
        }
        head = prev;
    }
       Node *merge2Lists(Node *h1, Node *h2)
    {
        if (h1 == NULL)
            return h2;
        if (h2 == NULL)
            return h1;
        if ((*h1).data <= (*h2).data)
        {
            
            (*h1).next = merge2Lists((*h1).next, h2);
            return h1;
        }
        if ((*h1).data > (*h2).data)
        { 
            (*h2).next = merge2Lists(h1, (*h2).next);
            return h2;
        }
    }
};

int main()
{

    return 0;
}
