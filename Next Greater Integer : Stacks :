naive approach :
vector<int> array = {6, 0, 8, 1, 3};
    vector<int> ans(array.size(), -1);
    for (int i = 0; i < array.size() - 1; i++)
    {
        if (array[i] < array[i + 1])
        {
            ans[i] = array[i + 1];
        }
        else if (array[i] > array[i + 1])
        {
            int j = i + 1;
            while (j < array.size() && array[j] <= array[i])
            {
                j++;
            }
            if (j < array.size())
            {
                ans[i] = array[j];
            }
        }
    }
    for (int i = 0; i < array.size(); i++)
    {
        cout << ans[i] << " ";
    }

stack based approach:

vector<int> array = {6, 0, 8, 1, 3};
    vector<int> ans(array.size(), -1);
    stack<int> st;

    for (int i = array.size() - 1; i >= 0; i--)
    {
        if (st.empty()==1)
        {
            st.push(array[i]);
        }
        else
        {
            // first remove all smaller elements
            while (st.empty()==0 && st.top() <= array[i])
            {
                st.pop();
            }
            // after popping, if stack not empty, top is NGE
            if (st.empty()==0&& st.top()> array[i])
            {
                ans[i] = st.top();
            }
            st.push(array[i]);
        }
    }
    for (int i = 0; i < array.size(); i++)
    {
        cout << ans[i] << " ";
    }
    return 0;
}
