#include <iostream>
using namespace std;

class Node
{
public:
    int data;
    Node *next;
    Node(int val)
    {
        data = val;
        next = NULL;
    }
};

class LinkedList
{
public:
    Node *head;
    LinkedList()
    {
        head = NULL;
    }

    void push_back(int val)
    {
        Node *newNode = new Node(val);
        if (head == NULL)
        {
            head = newNode;
            return;
        }
        Node *temp = head;
        while (temp->next != NULL)
            temp = temp->next;
        temp->next = newNode;
    }

    void display()
    {
        Node *temp = head;
        while (temp != NULL)
        {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }

    // Helper to find k-th node from current head
    Node *get_the_kth_node(Node *head, int k)
    {
        Node *temp = head;
        int count = 1;
        while (temp != NULL && count < k)
        {
            temp = temp->next;
            count++;
        }
        return temp;
    }

    // Helper: reverse a linked list
    Node *reverseListHelperFunction(Node *head)
    {
        Node *prev = NULL, *curr = head, *nextNode = NULL;
        while (curr != NULL)
        {
            nextNode = curr->next;
            curr->next = prev;
            prev = curr;
            curr = nextNode;
        }
        return prev; // new head after reversal
    }

    // Main: reverse in groups of k
    Node *Reverse_NODES_IN_K_GROUP(Node *head, int k)
    {
        if (head == NULL || k <= 1)
            return head;
        else
        {

            Node *t1 = head;
            Node *prevNode = NULL;
            Node *newHead = NULL;

            while (t1 != NULL)
            {
                Node *t2 = get_the_kth_node(t1, k);
                if (t2 == NULL) // if less than k nodes remain
                {
                    if (prevNode != NULL)
                        prevNode->next = t1;
                    break;
                }

                Node *nextNode = t2->next; // store (k+1)th node
                t2->next = NULL;           // temporarily break

                Node *reversedHead = reverseListHelperFunction(t1); // reverse this group

                if (newHead == NULL)
                    newHead = reversedHead; // set new head once

                if (prevNode != NULL)
                    prevNode->next = reversedHead; // connect previous node

                prevNode = t1; // t1 becomes node of reversed block
                t1 = nextNode;
            }
            return newHead;
        }
    }
};

int main()
{
    LinkedList list;
    for (int i = 1; i <= 10; i++)
        list.push_back(i);

    cout << "Original List: ";
    list.display();

    int k = 3;
    list.head = list.Reverse_NODES_IN_K_GROUP(list.head, k);

    cout << "Reversed in groups of " << k << ": ";
    list.display();

    return 0;
}
