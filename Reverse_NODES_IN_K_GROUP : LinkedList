#include <iostream>
using namespace std;

class Node
{
public:
    int data;
    Node *next;
    Node(int val)
    {
        data = val;
        next = NULL;
    }
};

class LinkedList
{
public:
    Node *head;
    LinkedList() { head = NULL; }

    void push_back(int val)
    {
        Node *newNode = new Node(val);
        if (!head)
        {
            head = newNode;
            return;
        }
        Node *temp = head;
        while (temp->next)
            temp = temp->next;
        temp->next = newNode;
    }

    void display()
    {
        Node *temp = head;
        while (temp)
        {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }

    Node *getKthNode(Node *temp, int k)
    {
        int count = 1;
        while (count<=k && temp !=NULL)
        {
            if (count == k)
                return temp;
            temp = temp->next;
            count++;
        }
        return temp;
    }

    Node *reverseListHelperFunction(Node *head)
    {
        Node *prev = NULL;
        Node *curr = head;
        Node *nextNode = NULL;

        while (curr != NULL)
        {
            nextNode = curr->next;
            curr->next = prev;
            prev = curr;
            curr = nextNode;
        }

        return prev; // new head after reversal
    }
    Node *reverseKGroup(Node *head, int k)
    {
        if (!head || k <= 1)
            return head;
        else
        {
            Node *temp = head;
            Node *prevLast = NULL;

            while (temp != NULL)
            {
                Node *kthNode = getKthNode(temp, k);
                if (!kthNode)
                {
                    if (prevLast)
                    {
                        prevLast->next = temp;
                        break;
                    }
                }
                else
                {
                    Node *nextNode = kthNode->next;
                    kthNode->next = NULL;

                    Node *reversedHead = reverseListHelperFunction(temp);

                    if (temp == head)
                        head = kthNode; // update head only once
                    if (prevLast)
                        prevLast->next = kthNode;

                    prevLast = temp; // temp becomes last node after reversal
                    temp = nextNode;
                }
            }
            return head;
        }
    }
};
int main()
{
    LinkedList list;
    for (int i = 1; i <= 10; i++)
        list.push_back(i);
    cout << "Original List: ";
    list.display();
    int k = 3;
    list.head = list.reverseKGroup(list.head, k);
    cout << "Reversed in groups of " << k << ": ";
    list.display();
    return 0;
}
