#include <iostream>
#include <string>
#include <map>

using namespace std;
int main()
{
    map<int, string> m;
    m.insert({1, "Pallav"});
    m.insert({2, "Kumar"}); // O(logn)
    m.insert({3, "Gupta"}); // every key must be unique
    m[4] = "Hello";         // another way of inserting in map

    map<int, string>::iterator it; // map iterator is a bidirectional iterator
    for (it = m.begin(); it != m.end(); it++)
    {
        cout << (*it).first << " " << (*it).second << endl;
    }
    for (auto &pr : m) // second way of writing without using iterator
    {
        cout << pr.first << " " << pr.second << endl; // O(logn)
    }
    cout << m.size() << endl;
    if (m.empty() == 0)
    {
        cout << "map is not empty" << endl;
    }
    else
    {
        cout << "map is empty" << endl;
    }
    // m.clear();
    // cout << m.size() << endl;
    it = m.find(2);// O(logn)

    if (it != m.end())
    {

        cout << "Found User: " << (*it).second
             << " (Key: " << (*it).first << ")" << endl;
    }
    else
    {

        cout << "User 102 not in the map." << endl;
    }

    // when you call the function of find there are two main possibilities
    //  If the key IS FOUND(102)
    //  iterator points to the house (data) with key 102.
    //  If the key is NOT FOUND
    //  iterator points to the "End of the Road" sign (users.end()).
    //  if (location_iterator != users.end())
    // If the location iterator is NOT the 'past-the-end' marker, then the key must have been found at a valid location.
    size_t cnt = m.erase(3); 
    cout<<"Key 3 removed. Size is now: " << m.size() << endl;//cnt return a number of elements removed that is 0 or 1
    


    return 0;
}
