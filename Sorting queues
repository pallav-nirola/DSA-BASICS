#include <iostream>
#include <queue>

using namespace std;

void insertInSortedOrder(queue<int>& q, int element) {
    int n = q.size();

    while (n--) {
        int samne = q.front();
        q.pop();

        if (element < samne) {
            q.push(element);
            element = samne;  // Swap element to insert later
        } else {
            q.push(samne);  // Fixed here
        }
    }

    // Insert the last remaining element (largest one)
    q.push(element);
}

void sortQueue(queue<int>& q) {
    if (q.empty()) {
        return;
    }

    int front = q.front();
    q.pop();

    sortQueue(q);

    insertInSortedOrder(q, front);
}

int main() {
    queue<int> q;

    q.push(3);
    q.push(4);
    q.push(2);
    q.push(5);
    q.push(1);
    q.push(6);

    cout << "Original queue: ";
    queue<int> temp = q;
    while (!temp.empty()) {
        cout << temp.front() << " ";
        temp.pop();
    }
    cout << "\n";

    sortQueue(q);

    cout << "Sorted queue: ";
    while (!q.empty()) {
        cout << q.front() << " ";
        q.pop();
    }
    cout << "\n";

    return 0;
}
