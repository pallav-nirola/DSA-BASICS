#include <iostream>
#include <algorithm>
#include <string>
using namespace std;

void rev(string &str, int start , int end) {
    if (start >= end)
        return;

    swap(str[start], str[end]);
    rev(str, start + 1 , end - 1);
}

int main() {
    string str = "hello";
    rev(str, 0 , str.length() - 1);
    cout << str << endl;

    return 0;
}
// Here i used return type 0 when i used int fun which is wrong cause it will always return the valeu 0 ;
// My code
#include <iostream>
#include <algorithm>
#include <string>
using namespace std;
int rev(string &str, int start , int end){
    if (start >= end)
    
        return 0;
    
   else
swap(str[start], str[end]);
start ++;
end--;
return rev(str, start , end);


}

int main()
{
    string str = "hello";
    cout<<rev(str, 0 , str.length()-1)<<endl;

    return 0;
}

| Call              | Swap done? | What `return` gives back     |
| ----------------- | ---------- | ---------------------------- |
| rev(str, 0, 4)    | swap h<->o | waits for rev(1,3) to return |
| rev(str, 1, 3)    | swap e<->l | waits for rev(2,2) to return |
| rev(str, 2, 2)    | no swap    | returns 0                    |
| (back to rev 1,3) | no swap    | returns 0                    |
| (back to rev 0,4) | no swap    | returns 0                    |
// whne to use int fucn and when to use void
Use int (or any type) when:
You want the recursion to calculate and return a result.

Example: sum, factorial, power, GCD, Fibonacci.
Use void when:
You want the recursion to perform an action (like reversing, printing, modifying), but no calculation is returned.

Example: reverse a string, print numbers, modify an array
